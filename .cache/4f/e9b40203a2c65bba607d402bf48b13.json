{"id":"node_modules/overmind/es/types.js","dependencies":[{"name":"/Users/tollefsen/code/idletown/node_modules/overmind/es/types.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/tollefsen/code/idletown/package.json","includedInParent":true,"mtime":1546780215350},{"name":"/Users/tollefsen/code/idletown/node_modules/overmind/package.json","includedInParent":true,"mtime":1545927827891},{"name":"./internalTypes","loc":{"line":3,"column":26},"parent":"/Users/tollefsen/code/idletown/node_modules/overmind/es/types.js","resolved":"/Users/tollefsen/code/idletown/node_modules/overmind/es/internalTypes.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"EventType\", {\n  enumerable: true,\n  get: function () {\n    return _internalTypes.EventType;\n  }\n});\n\nvar _internalTypes = require(\"./internalTypes\");","map":{"mappings":[{"source":"../src/types.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":13,"column":0}}],"sources":{"../src/types.ts":"import { ResolveActions, ResolveState, TBaseContext } from './internalTypes'\nimport { Overmind } from './'\n\n/** ===== PUBLIC API\n */\nexport { EventType } from './internalTypes'\n\nexport type Configuration = {\n  onInitialize?: any\n  state?: {}\n  effects?: {}\n  actions?: {}\n}\n\nexport type BaseApp = {\n  state: {}\n  effects: {}\n  actions: {}\n}\n\nexport type TStateObject =\n  | {\n      [key: string]:\n        | TStateObject\n        | string\n        | TDerive<any, any, any>\n        | number\n        | boolean\n        | object\n    }\n  | undefined\n\nexport interface TConfig<Config extends Configuration> {\n  state: Config['state']\n  actions: Config['actions']\n  effects: Config['effects'] & {}\n}\n\n// This is the type of the `app` argument passed in components.\nexport type TApp<Config extends Configuration> = {\n  // Resolves `Derive` types in state.\n  state: ResolveState<Config['state']>\n  actions: ResolveActions<Config['actions']>\n  reaction: (\n    name: string,\n    stateCb: (state: TApp<Config>['state']) => any,\n    Function\n  ) => void\n}\n\n// This is the type of the argument passed in actions.\nexport type TValueContext<Config extends Configuration, Value> = TBaseContext<\n  Config\n> & {\n  value: Value\n}\n\nexport type TAction<Config extends Configuration, Value> = (\n  context: TValueContext<Config, Value>\n) => any\n\nexport type TOperator<Config extends Configuration, Input, Output> = (\n  err: Error | null,\n  val: TValueContext<Config, Input>,\n  next: (err: Error | null, val?: TValueContext<Config, Output>) => void,\n  final?: (err, Error, val?: TValueContext<Config, Output>) => void\n) => void\n\nexport type TDerive<\n  Config extends Configuration,\n  Parent extends TStateObject,\n  Value\n> = (\n  parent: ResolveState<Parent>,\n  state: ResolveState<Config['state'] & {}>\n) => Value\n\nexport type TOnInitialize<Config extends Configuration> = (\n  context: TValueContext<Config, Overmind<Config>>\n) => void\n"},"lineCount":null}},"hash":"4223637b36c91168231b60fbb8c31d07","cacheData":{"env":{}}}